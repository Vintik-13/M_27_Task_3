/*Задание 3. Симуляция работы компании

Что нужно сделать
Реализуйте симуляцию работы компании. В компании существует вертикальное
управление с иерархией. Есть основные рабочие, подчинённые, разбитые на
команды. У каждой команды есть менеджер среднего звена. Всей компанией
руководит глава компании. У всех сотрудников, включая руководителя,
есть имена.
Глава компании выполняет стратегическое управление. Он определяет основной
вектор движения — задачи верхнего уровня. Менеджеры среднего звена разбивают
эти задачи на подзадачи и раздают их своим подчинённым. Подчинённые выполняют
работу.
Реализация данной логики должна проходить упрощённым образом. Указания главы
компании поступают из стандартного ввода и являются не более чем целочисленными
идентификаторами.
Данные идентификаторы служат зерном для генератора случайных чисел. Каждый
из менеджеров, принимая себе эту целочисленную команду, добавляет к ней свой
порядковый номер и вызывает с результирующей суммой функцию std::srand().
На основе этой суммы вычисляется общее количество задач, которое требуется
выполнить данной командой, — от 1 до количества работников в группе. Всего
есть три типа задач для работников: A, B и C. Они тоже выбираются случайно
и распределяются между незанятыми рабочими.
При старте программы пользователь указывает в стандартном вводе количество
команд и количество работников в каждой из команд.
Далее пользователь вводит целые числа, которые соответствуют указаниям
руководителя компании. Когда какой-то работник или менеджер получил указания
или задачу, об этом сообщается в стандартный вывод, включая имя работающего
сотрудника. Программа завершается, когда все работники заняты какими-то
задачами.*/

#include "Company.h"

int main()
{
    Boss boss;

    std::vector<std::vector<std::string>> pattern { { "Ivanov",  "Ivanov-1",  "Ivanov-2",  "Ivanov-3",  "Ivanov-4" },
                                                    { "Petrov",  "Petrov-1",  "Petrov-2",  "Petrov-3",  "Petrov-4" },
                                                    { "Sidorov", "Sidorov-1", "Sidorov-2", "Sidorov-3", "Sidorov-4"}
    };

#ifdef _DEBUGGING_

    boss.CreateTeam(pattern);

#endif // _DEBUGGING_

#ifndef _DEBUGGING_

    boss.CreateTeam();

#endif // !_DEBUGGING_    

    int a;

    std::cout << "Setting a task for company managers: ";

    std::cin >> a;

    while (!boss.SetComand(a)) {

        std::cout << std::endl << "Setting a task for company managers: ";

        std::cin >> a;
    }

    std::cout << "All employees are busy!";
}

